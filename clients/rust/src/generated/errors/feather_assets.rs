//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum FeatherAssetsError {
    /// 6000 - Custom error message
    #[error("Custom error message")]
    CustomError = 0x1770,
    /// 6001 - Invalid Max Size, there are existing members
    #[error("Invalid Max Size, there are existing members")]
    InvalidMaxSize = 0x1771,
    /// 6002 - Unauthorized group signer
    #[error("Unauthorized group signer")]
    InvalidGroupSigner = 0x1772,
    /// 6003 - Unauthorized asset signer
    #[error("Unauthorized asset signer")]
    InvalidAssetSigner = 0x1773,
    /// 6004 - No Update Inputs found
    #[error("No Update Inputs found")]
    ArgumentsNotFound = 0x1774,
    /// 6005 - Max members reached
    #[error("Max members reached")]
    MemberAssetOverflow = 0x1775,
    /// 6006 - Metadata Account Already Exist
    #[error("Metadata Account Already Exist")]
    MetadataAccountExistAlready = 0x1776,
    /// 6007 - Royalty Account Already Exist
    #[error("Royalty Account Already Exist")]
    RoyaltyAccountExistAlready = 0x1777,
    /// 6008 - Group Account Not Found
    #[error("Group Account Not Found")]
    GroupAccountNotFound = 0x1778,
}

impl solana_program::program_error::PrintProgramError for FeatherAssetsError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

